#25 Использование обратного вызова
"""
Если мы рассмотрим ключевое слово def , то увидим, что оно может создавать именованную функцию,
после чего используя ее имя для вызова в любом месте программы. 
Помимо всего прочего, она возвращает ее оператору некоторое значение. 
В языке Python существует возможность создавать анонимные функции (функции без имени), 
используя ключевое слово lambda. 
Стоит добавить, что анонимная функция может содержать одно выражение, которое возвращает значение
В отличие от обычной ф-ции c ключевым словом def,
lambda - функция возвращает объект, которому разрешается
присвоить переменную
Потом же она может быть использована в качестве обращения 
к функции ОБРАТНЫЙ вызов в Любом месте программы, 
исполнить блок выражений

Итог:
Конструкция lambda позволяет программистам использовать
альтернативный синтаксис для создания функций
Пример:
	def square (x) :
	return x ** 2

	square = lambda x : x ** 2
Из последней записи следует отметить, что аргумент из ключевого
слова lambda стоит БЕЗ скобок.
Выражение не требует ключевого слова return,
т.к. она в любом случае возвращает значение

Ключевое слово lambda - это альтернатива для создания 
ф-ции, используемой для встраиваемой ф-ции
в любое место кода

К примеру, обратные вызовы довольно часто программируются
в виде однострочных lambda - выражений

def function_1 : исполняемые-выражения
def function_2 : исполняемые-выражения

callbacks = [ function_1 , function_2 ]

callbacks = [ lambda : выражение, lambda : выражение ]


"""
# определим функции, к-е возвращают переданные
# аргументы, возведенными в степень с разными значениями

def function_1 ( x ) : return x ** 2
def function_2 ( x ) : return x ** 3
def function_3 ( x ) : return x ** 4

# добавим в списки обратных вызовов каждую ф-цию,
# указав ссылки на их имена
callbacks = [ function_1 , function_2 , function_3 ]

# теперь выведем заголовок, а также результаты передачи
# значений каждой из трех именованных функций
print ( '\nNamed Functions:' )
for function in callbacks : print ( 'Result:' , function ( 3 ) )

# добавим инструкцию для создания списка вызовов анонимных ф-ций
callbacks = \
[ lambda x : x ** 2 , lambda x : x ** 3 , lambda x : x ** 4 ]
# для того, что воспользоваться переносом на другую строку


# выведем заголовок
# и результат передачи каждой из трех анонимных функций
print ( '\nAnonymous Functions:' )
for function in callbacks : print ( 'Result:' , function ( 3 ) )

